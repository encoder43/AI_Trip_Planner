import streamlit as st
import requests
import datetime

BASE_URL = "http://localhost:8000"  # Backend endpoint

st.set_page_config(
    page_title="🌍 Travel Planner Agentic Application",
    page_icon="🌍",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title("🌍 Travel Planner Agentic Application")
st.header("Plan your perfect trip ✈️")

# Travel details form
with st.form("travel_form"):
    col1, col2 = st.columns(2)

    with col1:
        start_place = st.text_input("Starting Place", placeholder="e.g. Mumbai, India")
        destination = st.text_input("Destination", placeholder="e.g. Goa, India")

    with col2:
        start_date = st.date_input("Start Date")
        end_date = st.date_input("End Date")

    travelers = st.number_input("Number of Travelers", min_value=1, step=1, value=1)

    budget = st.number_input("Approximate Budget", min_value=100, step=50, value=1000)

    currency = st.selectbox(
        "Preferred Currency",
        ["USD", "EUR", "INR", "GBP", "JPY", "AUD", "CAD"],
        index=0,
    )

    preference = st.radio(
        "Preferred Style of Travel",
        ["Balanced", "Luxury", "Budget", "Adventure", "Cultural", "Relaxation"],
        index=0,
    )

    accommodation = st.selectbox(
        "Preferred Accommodation Type",
        ["Hotel", "Hostel", "Resort", "Airbnb", "Guesthouse", "Any"],
        index=0,
    )

    interests = st.multiselect(
        "Special Interests",
        ["Beaches", "Mountains", "History & Culture", "Nightlife", "Shopping", "Food & Dining", "Family-Friendly", "Nature & Wildlife", "Adventure Sports"],
        default=["History & Culture"]
    )

    submit_button = st.form_submit_button("Generate Travel Plan 🌍")

if submit_button:
    if not start_place.strip() or not destination.strip():
        st.error("Please enter both a starting place and a destination.")
    else:
        try:
            with st.spinner("Bot is creating your personalized travel plan..."):
                payload = {
                    "start_place": start_place,
                    "destination": destination,
                    "start_date": str(start_date),
                    "end_date": str(end_date),
                    "budget": budget,
                    "currency": currency,
                    "travelers": travelers,
                    "preference": preference,
                    "accommodation": accommodation,
                    "interests": interests,
                }
                response = requests.post(f"{BASE_URL}/query", json=payload)

            if response.status_code == 200:
                answer = response.json().get("answer", "No answer returned.")
                markdown_content = f"""
# 🌍 AI Travel Plan for {destination}

**Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
**Created by:** Dcoder's Travel Agent  

**Trip Details**  
- Starting Place: {start_place}  
- Destination: {destination}  
- Dates: {start_date} → {end_date}  
- Travelers: {travelers}  
- Budget: {budget} {currency}  
- Style: {preference}  
- Accommodation: {accommodation}  
- Interests: {", ".join(interests) if interests else "Not specified"}  

---

{answer}

---

*This travel plan was generated by AI. Please verify all information (prices, hours, requirements) before booking your trip.*
"""
                st.markdown(markdown_content)
            else:
                st.error("❌ Bot failed to respond: " + response.text)

        except Exception as e:
            st.error(f"The response failed due to: {e}")
